一、单例模式的简单介绍
    单例模式是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法
二、单例模式的实现方式(八种)
    1、饿汉式（静态变量）
        优点：这种方式写法比较简单，在类装载的时候完成实例化，避免了线程同步问题
        缺点：在类装载的时候完成实例化，没有达到懒加载的效果。如果从始至终未使用过这个实例，将会造成内存浪费
        结论：这种方式可用，但可能会造成内存浪费
    2、饿汉式（静态代码块）
        优缺点和结论，同上
    3、懒汉式（线程不安全）
        优点：这种方式虽起到了懒加载的效果，但只能在单线程下使用
        缺点：如果在多线程下，一个线程进入了if(singleton == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句块，就会产生多个实例。
              所以在多线程环境下不可使用这种方式
        结论：实际开发中，不要使用这种方式
    4、懒汉式（线程安全，同步方法）
        优点：这种方式解决了线程安全问题
        缺点：但效率比较低，每个线程想获得类的实例的时候，执行getInstance()方法都要进行同步。
              而其实这个方法只执行一次实例化代码就够了，后面再想获得实例，直接return。
              方法进行同步效率太低
        结论：实际开发中，不推荐使用这种方式
    5、懒汉式（线程安全，同步代码块）
        优点：
        缺点：
        结论：不推荐使用
    6、双重检查
        优点：这种方式使用了双重检查概念，是多线程开发中常使用到的，代码中进行了两次if(singleton == null)检查，保证了线程安全
              实例化代码也只执行了一次，后面再次访问时，判断if(singleton == null)，直接return实例化对象，避免了反复进行方法同步
              线程安全，延迟加载，效率较高
        结论：实际开发中，推荐使用这种方式
    7、静态内部类
        优点：这种方式使用类装载的机制来保证初始化实例时只有一个线程。
              静态内部类方式在singleton类被装载时不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化
              类的静态属性只会在第一次加载类的时候初始化，所以，JVM可以保证线程的安全性，在类进行初始化时，别的线程是无法进入的
              避免了线程不安全，利用静态内部类特点实现延迟加载，效率高
        结论：推荐使用
    8、枚举
        优点：这种方式是借助了jdk1.5中添加的枚举来实现单例模式。
              不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象
        结论：推荐使用
三、单例模式的注意事项
    1、单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能
    2、当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new
    3、单例模式使用的场景：需要频繁创建和销毁的对象、创建对象时耗时过多或耗费资源过多(即重量级对象)，但又经常用到的对象、工具类对象、
       频繁访问数据库或文件的对象(比如数据源、session工厂等)